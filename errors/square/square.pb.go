// Code generated by protoc-gen-go.
// source: square.proto
// DO NOT EDIT!

/*
Package squarepb is a generated protocol buffer package.

It is generated from these files:
	square.proto

It has these top-level messages:
	Square
	SquareRootRequest
	SquareRootResponse
*/
package squarepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Square struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *Square) Reset()                    { *m = Square{} }
func (m *Square) String() string            { return proto.CompactTextString(m) }
func (*Square) ProtoMessage()               {}
func (*Square) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Square) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootRequest struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *SquareRootRequest) Reset()                    { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string            { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()               {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SquareRootRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootResponse struct {
	NumberRoot float64 `protobuf:"fixed64,1,opt,name=number_root,json=numberRoot" json:"number_root,omitempty"`
}

func (m *SquareRootResponse) Reset()                    { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string            { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()               {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SquareRootResponse) GetNumberRoot() float64 {
	if m != nil {
		return m.NumberRoot
	}
	return 0
}

func init() {
	proto.RegisterType((*Square)(nil), "square.Square")
	proto.RegisterType((*SquareRootRequest)(nil), "square.SquareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "square.SquareRootResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SquareRootService service

type SquareRootServiceClient interface {
	// Unary
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
}

type squareRootServiceClient struct {
	cc *grpc.ClientConn
}

func NewSquareRootServiceClient(cc *grpc.ClientConn) SquareRootServiceClient {
	return &squareRootServiceClient{cc}
}

func (c *squareRootServiceClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := grpc.Invoke(ctx, "/square.SquareRootService/SquareRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SquareRootService service

type SquareRootServiceServer interface {
	// Unary
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
}

func RegisterSquareRootServiceServer(s *grpc.Server, srv SquareRootServiceServer) {
	s.RegisterService(&_SquareRootService_serviceDesc, srv)
}

func _SquareRootService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareRootServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/square.SquareRootService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareRootServiceServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SquareRootService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "square.SquareRootService",
	HandlerType: (*SquareRootServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SquareRoot",
			Handler:    _SquareRootService_SquareRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "square.proto",
}

func init() { proto.RegisterFile("square.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x2c, 0x4d,
	0x2c, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x14, 0xb8, 0xd8,
	0x82, 0xc1, 0x2c, 0x21, 0x31, 0x2e, 0xb6, 0xbc, 0xd2, 0xdc, 0xa4, 0xd4, 0x22, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xd6, 0x20, 0x28, 0x4f, 0x49, 0x9b, 0x4b, 0x10, 0xa2, 0x22, 0x28, 0x3f, 0xbf, 0x24,
	0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x04, 0xa7, 0x62, 0x53, 0x2e, 0x21, 0x64, 0xc5, 0xc5, 0x05,
	0xf9, 0x79, 0xc5, 0xa9, 0x42, 0xf2, 0x5c, 0xdc, 0x10, 0xf9, 0xf8, 0x22, 0xa0, 0x30, 0x58, 0x0b,
	0x63, 0x10, 0x17, 0x44, 0x08, 0xa4, 0xd0, 0x28, 0x0a, 0xd9, 0x8e, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc,
	0xe4, 0x54, 0x21, 0x57, 0x2e, 0x2e, 0x84, 0xa0, 0x90, 0xa4, 0x1e, 0xd4, 0xfd, 0x18, 0x8e, 0x91,
	0x92, 0xc2, 0x26, 0x05, 0xb1, 0x5a, 0x89, 0xc1, 0x89, 0x2b, 0x8a, 0x03, 0x22, 0x5d, 0x90, 0x94,
	0xc4, 0x06, 0xf6, 0xbc, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x47, 0xf6, 0xf9, 0x0c, 0x01,
	0x00, 0x00,
}

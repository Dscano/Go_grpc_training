// Code generated by protoc-gen-go.
// source: calc.proto
// DO NOT EDIT!

/*
Package calcpb is a generated protocol buffer package.

It is generated from these files:
	calc.proto

It has these top-level messages:
	CalcRequest
	CalcResponse
	ComputeAverageRequest
	ComputeAverageResponse
*/
package calcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CalcRequest struct {
	FirstNumber  int32 `protobuf:"varint,1,opt,name=first_number,json=firstNumber" json:"first_number,omitempty"`
	SecondNumber int32 `protobuf:"varint,2,opt,name=second_number,json=secondNumber" json:"second_number,omitempty"`
}

func (m *CalcRequest) Reset()                    { *m = CalcRequest{} }
func (m *CalcRequest) String() string            { return proto.CompactTextString(m) }
func (*CalcRequest) ProtoMessage()               {}
func (*CalcRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CalcRequest) GetFirstNumber() int32 {
	if m != nil {
		return m.FirstNumber
	}
	return 0
}

func (m *CalcRequest) GetSecondNumber() int32 {
	if m != nil {
		return m.SecondNumber
	}
	return 0
}

type CalcResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *CalcResponse) Reset()                    { *m = CalcResponse{} }
func (m *CalcResponse) String() string            { return proto.CompactTextString(m) }
func (*CalcResponse) ProtoMessage()               {}
func (*CalcResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CalcResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ComputeAverageRequest struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *ComputeAverageRequest) Reset()                    { *m = ComputeAverageRequest{} }
func (m *ComputeAverageRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeAverageRequest) ProtoMessage()               {}
func (*ComputeAverageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ComputeAverageRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ComputeAverageResponse struct {
	Number float64 `protobuf:"fixed64,1,opt,name=number" json:"number,omitempty"`
}

func (m *ComputeAverageResponse) Reset()                    { *m = ComputeAverageResponse{} }
func (m *ComputeAverageResponse) String() string            { return proto.CompactTextString(m) }
func (*ComputeAverageResponse) ProtoMessage()               {}
func (*ComputeAverageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ComputeAverageResponse) GetNumber() float64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*CalcRequest)(nil), "greet.CalcRequest")
	proto.RegisterType((*CalcResponse)(nil), "greet.CalcResponse")
	proto.RegisterType((*ComputeAverageRequest)(nil), "greet.ComputeAverageRequest")
	proto.RegisterType((*ComputeAverageResponse)(nil), "greet.ComputeAverageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CalcService service

type CalcServiceClient interface {
	// Unary
	Calc(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcResponse, error)
	// Client Streaming
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalcService_ComputeAverageClient, error)
}

type calcServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalcServiceClient(cc *grpc.ClientConn) CalcServiceClient {
	return &calcServiceClient{cc}
}

func (c *calcServiceClient) Calc(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcResponse, error) {
	out := new(CalcResponse)
	err := grpc.Invoke(ctx, "/greet.CalcService/Calc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcServiceClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalcService_ComputeAverageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CalcService_serviceDesc.Streams[0], c.cc, "/greet.CalcService/ComputeAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceComputeAverageClient{stream}
	return x, nil
}

type CalcService_ComputeAverageClient interface {
	Send(*ComputeAverageRequest) error
	CloseAndRecv() (*ComputeAverageResponse, error)
	grpc.ClientStream
}

type calcServiceComputeAverageClient struct {
	grpc.ClientStream
}

func (x *calcServiceComputeAverageClient) Send(m *ComputeAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcServiceComputeAverageClient) CloseAndRecv() (*ComputeAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CalcService service

type CalcServiceServer interface {
	// Unary
	Calc(context.Context, *CalcRequest) (*CalcResponse, error)
	// Client Streaming
	ComputeAverage(CalcService_ComputeAverageServer) error
}

func RegisterCalcServiceServer(s *grpc.Server, srv CalcServiceServer) {
	s.RegisterService(&_CalcService_serviceDesc, srv)
}

func _CalcService_Calc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).Calc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.CalcService/Calc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).Calc(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcService_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServiceServer).ComputeAverage(&calcServiceComputeAverageServer{stream})
}

type CalcService_ComputeAverageServer interface {
	SendAndClose(*ComputeAverageResponse) error
	Recv() (*ComputeAverageRequest, error)
	grpc.ServerStream
}

type calcServiceComputeAverageServer struct {
	grpc.ServerStream
}

func (x *calcServiceComputeAverageServer) SendAndClose(m *ComputeAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcServiceComputeAverageServer) Recv() (*ComputeAverageRequest, error) {
	m := new(ComputeAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CalcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greet.CalcService",
	HandlerType: (*CalcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calc",
			Handler:    _CalcService_Calc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ComputeAverage",
			Handler:       _CalcService_ComputeAverage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "calc.proto",
}

func init() { proto.RegisterFile("calc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4e, 0xcc, 0x49,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2f, 0x4a, 0x4d, 0x2d, 0x51, 0x0a, 0xe5,
	0xe2, 0x76, 0x06, 0x0a, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x29, 0x72, 0xf1, 0xa4,
	0x65, 0x16, 0x15, 0x97, 0xc4, 0xe7, 0x95, 0xe6, 0x26, 0xa5, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0x71, 0x83, 0xc5, 0xfc, 0xc0, 0x42, 0x42, 0xca, 0x5c, 0xbc, 0xc5, 0xa9, 0xc9, 0xf9,
	0x79, 0x29, 0x30, 0x35, 0x4c, 0x60, 0x35, 0x3c, 0x10, 0x41, 0x88, 0x22, 0x25, 0x35, 0x2e, 0x1e,
	0x88, 0xb1, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0x45, 0xa9, 0xc5, 0xa5,
	0x39, 0x25, 0x50, 0x13, 0xa1, 0x3c, 0x25, 0x7d, 0x2e, 0x51, 0xe7, 0xfc, 0xdc, 0x82, 0xd2, 0x92,
	0x54, 0xc7, 0xb2, 0xd4, 0xa2, 0xc4, 0xf4, 0x54, 0x98, 0x43, 0x80, 0x1a, 0x50, 0x9c, 0x00, 0xe5,
	0x29, 0x19, 0x70, 0x89, 0xa1, 0x6b, 0x40, 0x58, 0x81, 0xa4, 0x83, 0x11, 0xa6, 0xc3, 0x68, 0x32,
	0x23, 0xc4, 0x8b, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x86, 0x5c, 0x2c, 0x20, 0xae,
	0x90, 0x90, 0x1e, 0x38, 0x04, 0xf4, 0x90, 0xbc, 0x2f, 0x25, 0x8c, 0x22, 0x06, 0x31, 0x58, 0x89,
	0x41, 0x28, 0x90, 0x8b, 0x0f, 0xd5, 0x52, 0x21, 0x19, 0x98, 0x42, 0x6c, 0x8e, 0x97, 0x92, 0xc5,
	0x21, 0x0b, 0x33, 0x50, 0x83, 0xd1, 0x89, 0x23, 0x8a, 0x0d, 0x14, 0x19, 0x05, 0x49, 0x49, 0x6c,
	0xe0, 0xf8, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xac, 0xf1, 0x3a, 0x17, 0x9d, 0x01, 0x00,
	0x00,
}
